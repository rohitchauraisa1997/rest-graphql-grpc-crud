// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: grpc-server/proto/video.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoApi_Echo_FullMethodName        = "/main.VideoApi/Echo"
	VideoApi_GetVideos_FullMethodName   = "/main.VideoApi/GetVideos"
	VideoApi_GetVideo_FullMethodName    = "/main.VideoApi/GetVideo"
	VideoApi_AddVideo_FullMethodName    = "/main.VideoApi/AddVideo"
	VideoApi_DeleteVideo_FullMethodName = "/main.VideoApi/DeleteVideo"
)

// VideoApiClient is the client API for VideoApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoApiClient interface {
	Echo(ctx context.Context, in *TestResponseRequest, opts ...grpc.CallOption) (*TestResponseRequest, error)
	GetVideos(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*VideoList, error)
	GetVideo(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Video, error)
	AddVideo(ctx context.Context, in *NewVideo, opts ...grpc.CallOption) (*Video, error)
	DeleteVideo(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Video, error)
}

type videoApiClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoApiClient(cc grpc.ClientConnInterface) VideoApiClient {
	return &videoApiClient{cc}
}

func (c *videoApiClient) Echo(ctx context.Context, in *TestResponseRequest, opts ...grpc.CallOption) (*TestResponseRequest, error) {
	out := new(TestResponseRequest)
	err := c.cc.Invoke(ctx, VideoApi_Echo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoApiClient) GetVideos(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*VideoList, error) {
	out := new(VideoList)
	err := c.cc.Invoke(ctx, VideoApi_GetVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoApiClient) GetVideo(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Video, error) {
	out := new(Video)
	err := c.cc.Invoke(ctx, VideoApi_GetVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoApiClient) AddVideo(ctx context.Context, in *NewVideo, opts ...grpc.CallOption) (*Video, error) {
	out := new(Video)
	err := c.cc.Invoke(ctx, VideoApi_AddVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoApiClient) DeleteVideo(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Video, error) {
	out := new(Video)
	err := c.cc.Invoke(ctx, VideoApi_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoApiServer is the server API for VideoApi service.
// All implementations must embed UnimplementedVideoApiServer
// for forward compatibility
type VideoApiServer interface {
	Echo(context.Context, *TestResponseRequest) (*TestResponseRequest, error)
	GetVideos(context.Context, *NoParam) (*VideoList, error)
	GetVideo(context.Context, *Id) (*Video, error)
	AddVideo(context.Context, *NewVideo) (*Video, error)
	DeleteVideo(context.Context, *Id) (*Video, error)
	mustEmbedUnimplementedVideoApiServer()
}

// UnimplementedVideoApiServer must be embedded to have forward compatible implementations.
type UnimplementedVideoApiServer struct {
}

func (UnimplementedVideoApiServer) Echo(context.Context, *TestResponseRequest) (*TestResponseRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedVideoApiServer) GetVideos(context.Context, *NoParam) (*VideoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideos not implemented")
}
func (UnimplementedVideoApiServer) GetVideo(context.Context, *Id) (*Video, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedVideoApiServer) AddVideo(context.Context, *NewVideo) (*Video, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVideo not implemented")
}
func (UnimplementedVideoApiServer) DeleteVideo(context.Context, *Id) (*Video, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedVideoApiServer) mustEmbedUnimplementedVideoApiServer() {}

// UnsafeVideoApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoApiServer will
// result in compilation errors.
type UnsafeVideoApiServer interface {
	mustEmbedUnimplementedVideoApiServer()
}

func RegisterVideoApiServer(s grpc.ServiceRegistrar, srv VideoApiServer) {
	s.RegisterService(&VideoApi_ServiceDesc, srv)
}

func _VideoApi_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoApiServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoApi_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoApiServer).Echo(ctx, req.(*TestResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoApi_GetVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoApiServer).GetVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoApi_GetVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoApiServer).GetVideos(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoApi_GetVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoApiServer).GetVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoApi_GetVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoApiServer).GetVideo(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoApi_AddVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoApiServer).AddVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoApi_AddVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoApiServer).AddVideo(ctx, req.(*NewVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoApi_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoApiServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoApi_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoApiServer).DeleteVideo(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoApi_ServiceDesc is the grpc.ServiceDesc for VideoApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.VideoApi",
	HandlerType: (*VideoApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _VideoApi_Echo_Handler,
		},
		{
			MethodName: "GetVideos",
			Handler:    _VideoApi_GetVideos_Handler,
		},
		{
			MethodName: "GetVideo",
			Handler:    _VideoApi_GetVideo_Handler,
		},
		{
			MethodName: "AddVideo",
			Handler:    _VideoApi_AddVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _VideoApi_DeleteVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc-server/proto/video.proto",
}
